// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock is a generated GoMock package.
package mock

import (
	mock "MockTest/internal/user/service"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserData is a mock of UserData interface.
type MockUserData struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataMockRecorder
}

// MockUserDataMockRecorder is the mock recorder for MockUserData.
type MockUserDataMockRecorder struct {
	mock *MockUserData
}

// NewMockUserData creates a new mock instance.
func NewMockUserData(ctrl *gomock.Controller) *MockUserData {
	mock := &MockUserData{ctrl: ctrl}
	mock.recorder = &MockUserDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserData) EXPECT() *MockUserDataMockRecorder {
	return m.recorder
}

// GetUserByMobile mocks base method.
func (m *MockUserData) GetUserByMobile(ctx context.Context, mobile string) (mock.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByMobile", ctx, mobile)
	ret0, _ := ret[0].(mock.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByMobile indicates an expected call of GetUserByMobile.
func (mr *MockUserDataMockRecorder) GetUserByMobile(ctx, mobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByMobile", reflect.TypeOf((*MockUserData)(nil).GetUserByMobile), ctx, mobile)
}
